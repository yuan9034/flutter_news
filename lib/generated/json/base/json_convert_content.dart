// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_news/generated/json/category_entity_helper.dart';
import 'package:flutter_news/generated/json/news_list_request_entity_helper.dart';
import 'package:flutter_news/generated/json/news_list_response_entity_helper.dart';
import 'package:flutter_news/model/category_entity.dart';
import 'package:flutter_news/model/news_list_request_entity.dart';
import 'package:flutter_news/model/news_list_response_entity.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case CategoryEntity:
        return categoryEntityFromJson(data as CategoryEntity, json) as T;
      case CategoryData:
        return categoryDataFromJson(data as CategoryData, json) as T;
      case NewsListResponseEntity:
        return newsListResponseEntityFromJson(
            data as NewsListResponseEntity, json) as T;
      case NewsListResponseData:
        return newsListResponseDataFromJson(data as NewsListResponseData, json)
            as T;
      case NewsListResponseDataList:
        return newsListResponseDataListFromJson(
            data as NewsListResponseDataList, json) as T;
      case NewsListRequestEntity:
        return newsListRequestEntityFromJson(
            data as NewsListRequestEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case CategoryEntity:
        return categoryEntityToJson(data as CategoryEntity);
      case CategoryData:
        return categoryDataToJson(data as CategoryData);
      case NewsListResponseEntity:
        return newsListResponseEntityToJson(data as NewsListResponseEntity);
      case NewsListResponseData:
        return newsListResponseDataToJson(data as NewsListResponseData);
      case NewsListResponseDataList:
        return newsListResponseDataListToJson(data as NewsListResponseDataList);
      case NewsListRequestEntity:
        return newsListRequestEntityToJson(data as NewsListRequestEntity);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'CategoryEntity':
        return CategoryEntity().fromJson(json);
      case 'CategoryData':
        return CategoryData().fromJson(json);
      case 'NewsListResponseEntity':
        return NewsListResponseEntity().fromJson(json);
      case 'NewsListResponseData':
        return NewsListResponseData().fromJson(json);
      case 'NewsListResponseDataList':
        return NewsListResponseDataList().fromJson(json);
      case 'NewsListRequestEntity':
        return NewsListRequestEntity().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'CategoryEntity':
        return List<CategoryEntity>();
      case 'CategoryData':
        return List<CategoryData>();
      case 'NewsListResponseEntity':
        return List<NewsListResponseEntity>();
      case 'NewsListResponseData':
        return List<NewsListResponseData>();
      case 'NewsListResponseDataList':
        return List<NewsListResponseDataList>();
      case 'NewsListRequestEntity':
        return List<NewsListRequestEntity>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
